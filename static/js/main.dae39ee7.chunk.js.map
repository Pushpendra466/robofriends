{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robo.js","App.js","serviceWorker.js","index.js"],"names":["Card","prop","className","alt","src","id","name","username","email","Cardlist","robots","CardArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filterRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAiBeA,EAhBF,SAACC,GACV,OAAS,yBACDC,UAAY,uDAChB,yBACIC,IAAM,OACVC,IAAG,+BAA6BH,EAAKI,GAAlC,mBAJE,IAKD,6BAEJ,gCACOJ,EAAKK,KADZ,KAFI,KAGuB,+BACrBL,EAAKM,SADgB,KAHvB,IAIwB,+BACtBN,EAAKO,MADiB,KAJxB,OALC,MCaUC,EAZN,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACNC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OAAO,kBAAC,EAAD,CACPC,IAAQD,EACRT,GAAOK,EAAOI,GAAGT,GACjBC,KAASI,EAAOI,GAAGR,KACnBC,SAAaG,EAAOI,GAAGP,SACvBC,MAAUE,EAAOI,GAAGN,WAGxB,OAAS,iCAAUG,EAAV,MCDFK,EAXG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OAAS,yBAAMhB,UAAY,OACvB,2BACMA,UAAY,mCAClBiB,KAAO,SACPC,YAAc,gBACdC,SAAaH,IALR,MCFCR,EAAS,CAAC,CACfL,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAEX,CACIH,GAAI,EACJC,KAAM,cACNC,SAAU,YACVC,MAAO,qBAEX,CACIH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,qBAEX,CACIH,GAAI,EACJC,KAAM,SACNC,SAAU,SACVC,MAAO,iBAEX,CACIH,GAAI,EACJC,KAAM,YACNC,SAAU,OACVC,MAAO,oBAEX,CACIH,GAAI,EACJC,KAAM,SACNC,SAAU,MACVC,MAAO,cAEX,CACIH,GAAI,EACJC,KAAM,UACNC,SAAU,QACVC,MAAO,cAEX,CACIH,GAAI,EACJC,KAAM,SACNC,SAAU,OACVC,MAAO,sBAEX,CACIH,GAAI,EACJC,KAAM,cACNC,SAAU,SACVC,MAAO,4BAEX,CACIH,GAAI,GACJC,KAAM,SACNC,SAAU,MACVC,MAAO,qBC3BDc,G,kBAzBX,aAAe,IAAD,8BACV,+CAMJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAER,YAAaO,EAAME,OAAOC,SAN1C,EAAKC,MAAQ,CACTlB,OAAQA,EACRO,YAAa,IAJP,E,sEAUJ,IAAD,OACCY,EAAeC,KAAKF,MAAMlB,OAAOqB,QAAO,SAAArB,GAC1C,OAAOA,EAAOJ,KAAK0B,cAAcC,SAAS,EAAKL,MAAMX,YAAYe,kBAErE,OAAS,yBAAM9B,UAAY,MACvB,wBACGA,UAAY,MADf,iBADK,IAEoC,kBACzC,EADyC,CAC/BgB,aAAiBY,KAAKP,iBAH3B,IAID,kBACJ,EADI,CACKb,OAAWmB,IALf,S,GAfCK,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAQ,kBAAE,EAAF,MAAYC,SAASC,eAAe,SD6H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dae39ee7.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card = (prop) => {\r\n    return ( <\r\n        div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' >\r\n        <\r\n        img alt = 'robo'\r\n        src = { `https://robohash.org/${prop.id}?size=200x200` }\r\n        / > <\r\n        div >\r\n        <\r\n        h2 > { prop.name } < /h2>  <\r\n        p > { prop.username } < /p> <\r\n        p > { prop.email } < /p>   < /\r\n        div > <\r\n        /div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({ robots }) => {\r\n        const CardArray = robots.map((user, i) => {\r\n            return <Card\r\n            key = { i }\r\n            id = { robots[i].id }\r\n            name = { robots[i].name }\r\n            username = { robots[i].username }\r\n            email = { robots[i].email }\r\n            / >\r\n        })\r\n        return ( < div > { CardArray } < /div>);\r\n        }\r\n        export default Cardlist;","import React from 'react';\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return ( < div className = 'pa2' >\r\n        <\r\n        input className = 'pa3 ba b--green bg-lightest-blue'\r\n        type = 'search'\r\n        placeholder = 'Search Robots'\r\n        onChange = { searchChange }\r\n        / > <\r\n        /div>\r\n    );\r\n}\r\nexport default SearchBox;"," export const robots = [{\r\n         id: 1,\r\n         name: 'Leanme Graham',\r\n         username: 'Bret',\r\n         email: 'sincere@april.biz'\r\n     },\r\n     {\r\n         id: 2,\r\n         name: 'Ervin Hovel',\r\n         username: 'Antonette',\r\n         email: 'shanna@mweksda.tv'\r\n     },\r\n     {\r\n         id: 3,\r\n         name: 'Cleantine Bauch',\r\n         username: 'Samantha',\r\n         email: 'Nathan@yesnia.net'\r\n     },\r\n     {\r\n         id: 4,\r\n         name: 'Clarke',\r\n         username: 'Bclark',\r\n         email: 'clrk@mars.org'\r\n     },\r\n     {\r\n         id: 5,\r\n         name: 'Parnell W',\r\n         username: 'PerW',\r\n         email: 'parnellW@kat.onr'\r\n     },\r\n     {\r\n         id: 6,\r\n         name: 'samuel',\r\n         username: 'sam',\r\n         email: 'sam@owm.id'\r\n     },\r\n     {\r\n         id: 7,\r\n         name: 'meathue',\r\n         username: 'methu',\r\n         email: 'meth@sl.on'\r\n     },\r\n     {\r\n         id: 8,\r\n         name: 'pareru',\r\n         username: 'peru',\r\n         email: 'perera@promail.gol'\r\n     },\r\n     {\r\n         id: 9,\r\n         name: 'Chris Gayle',\r\n         username: 'Cgayle',\r\n         email: 'UniverseBoss@universe.gd'\r\n     },\r\n     {\r\n         id: 10,\r\n         name: 'Pooran',\r\n         username: 'por',\r\n         email: 'pooran@wimail.wi'\r\n     }\r\n ]","import React, { Component } from 'react';\r\nimport Cardlist from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport { robots } from './robo';\r\nimport './App.css';\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            searchfield: ''\r\n        }\r\n    }\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value });\r\n    }\r\n    render() {\r\n        const filterRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        return ( < div className = 'tc' >\r\n            <\r\n            h1 className = 'f1' > ROBOFRIENDS < /h1> <\r\n            SearchBox searchChange = { this.onSearchChange }\r\n            / > <\r\n            Cardlist robots = { filterRobots }\r\n            /> < /\r\n            div >\r\n        );\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render( < App / > , document.getElementById('root'));\n//ReactDOM.render( < h1 > Hello World! < /h1>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}